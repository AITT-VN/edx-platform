[tool:pytest]
# Note: The first file of settings found is used, there is no combining, so
# this file is only used for tests that don't find a pytest.ini file first.
# Details at https://docs.pytest.org/en/latest/reference/customize.html

DJANGO_SETTINGS_MODULE = lms.envs.test
addopts = --nomigrations --reuse-db --durations=20 --json-report --json-report-omit keywords streams collectors log traceback tests --json-report-file=none
# Enable default handling for all warnings, including those that are ignored by default;
# but hide rate-limit warnings (because we deliberately don't throttle test user logins)
# and field_data deprecation warnings (because fixing them requires a major low-priority refactoring)
filterwarnings =
    default
    ignore:No request passed to the backend, unable to rate-limit:UserWarning
    ignore::xblock.exceptions.FieldDataDeprecationWarning
    ignore::django.utils.deprecation.RemovedInDjango40Warning
    ignore::django.utils.deprecation.RemovedInDjango41Warning
junit_family = xunit2
norecursedirs = .* *.egg build conf dist node_modules test_root cms/envs lms/envs
python_classes =
python_files = tests.py test_*.py tests_*.py *_tests.py __init__.py

[pycodestyle]
# error codes: https://pycodestyle.readthedocs.io/en/latest/intro.html#error-codes
# E501: line too long
# E265: block comment should start with '# '
#   We ignore this because pep8 used to erroneously lump E266 into it also.
#   We should probably fix these now.
# E266: too many leading '#' for block comment
#   We have lots of comments that look like "##### HEADING #####" which violate
#   this rule, because they don't have a space after the first #. However,
#   they're still perfectly reasonable comments, so we disable this rule.
# W602: deprecated form of raising exception
#   We do this in a few places to modify the exception message while preserving
#   the traceback. See this blog post for more info:
#   http://nedbatchelder.com/blog/200711/rethrowing_exceptions_in_python.html
#   It's a little unusual, but we have good reasons for doing so, so we disable
#   this rule.
# E305,E402,E722,E731,E741,E743,W503,W504: errors and warnings added since pep8/pycodestyle
# 1.5.7 that we haven't cleaned up yet
ignore=E265,E266,E305,E402,E501,E722,E731,E741,E743,W503,W504,W602
exclude=migrations,.git,.pycharm_helpers,.tox,test_root/staticfiles,node_modules

[isort]
indent='    '
line_length=120
multi_line_output=3
skip=
    envs
    migrations

[importlinter]
root_packages =
    cms
    common
    lms
    openedx
    pavelib
include_external_packages = True

# To aid in the decoupling of LMS and CMS, ensure that LMS-specific code and shared
# code cannot import CMS/Studio-specific code.
# Please note that the exceptions here ought to be fixed. They are not examples
# to be followed. Please do not add to the list of exceptions.
[importlinter:contract:lms_should_not_depend_on_cms]
name = neither common/djangoapps, openedx, nor lms should depend on lms
type = forbidden
source_modules =
    common.djangoapps
    lms
    openedx
forbidden_modules =
    cms
ignore_imports =
    lms.djangoapps.courseware.plugins -> cms.djangoapps.contentstore.utils
    lms.djangoapps.course_home_api.tests.utils -> cms.djangoapps.contentstore.outlines
    lms.djangoapps.course_home_api.outline.tests.test_view -> cms.djangoapps.contentstore.outlines
    openedx.core.djangoapps.course_date_signals.handlers -> cms.djangoapps.contentstore.config.waffle
    openedx.core.djangoapps.course_date_signals.tests -> cms.djangoapps.contentstore.config.waffle
    openedx.core.djangoapps.content_libraries.api -> cms.djangoapps.contentstore.views.helpers
    openedx.core.djangoapps.content_libraries.management.commands.reindex_content_library -> cms.djangoapps.contentstore.management.commands.prompt

# To ensure that production code remains independent from our tooling infrastructure,
# disallow imports of anything into the Paver tools library.
[importlinter:contract:paver_and_pavelib_forbidden]
name = application code should not reference pavelib nor paver
type = forbidden
source_modules =
    lms
    common
    cms
    openedx
forbidden_modules =
    pavelib
    paver
ignore_imports =
    openedx.core.djangoapps.theming.management.commands.compile_sass -> pavelib.assets
    openedx.core.djangoapps.theming.management.commands.compile_sass -> paver
    openedx.testing.coverage_context_listener.pytest_plugin -> pavelib.utils.envs

# safe_lxml is one example of an edx-platform app that is completely independent of any
# other platform code. Let's try to keep it that way.
# We would like to say "openedx.core.lib" is a forbidden module, but import-linter doesn't like
# that, so we just disallow as much of the "openedx" package as we can.
[importlinter:contract:safe_lxml_independent]
name = openedx/core/lib/safe_lxml should not depend on any other application code
type = forbidden
source_modules =
    openedx.core.lib.safe_lxml
forbidden_modules =
    openedx.features
    openedx.core.djangoapps
    openedx.core.djangolib
    common
    lms
    cms
